import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords, wordnet
from nltk.stem import PorterStemmer, WordNetLemmatizer
from nltk import pos_tag
from sklearn.feature_extraction.text import TfidfVectorizer
import pandas as pd

# Download required NLTK data
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('averaged_perceptron_tagger')
nltk.download('wordnet')

# Sample documents
documents = [
    "Natural Language Processing is a fascinating field of AI.",
    "Text analytics involves preprocessing and transforming text data.",
    "Lemmatization returns dictionary forms of words, unlike stemming."
]

# Setup tools
stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()
lemmatizer = WordNetLemmatizer()

# Helper: map POS tags for lemmatization
def get_wordnet_pos(tag):
    if tag.startswith('J'):
        return wordnet.ADJ
    elif tag.startswith('V'):
        return wordnet.VERB
    elif tag.startswith('N'):
        return wordnet.NOUN
    elif tag.startswith('R'):
        return wordnet.ADV
    return wordnet.NOUN

# Preprocessing function
def preprocess(doc):
    tokens = word_tokenize(doc.lower())
    pos_tags = pos_tag(tokens)
    words = [w for w in tokens if w.isalpha() and w not in stop_words]
    stemmed = [stemmer.stem(w) for w in words]
    lemmatized = [lemmatizer.lemmatize(w, get_wordnet_pos(tag)) for w, tag in pos_tags if w.isalpha() and w not in stop_words]
    return tokens, pos_tags, words, stemmed, lemmatized

# Apply preprocessing
for i, doc in enumerate(documents):
    tokens, pos_tags, filtered, stemmed, lemmatized = preprocess(doc)
    print(f"\n--- Document {i+1} ---")
    print("Tokens:", tokens)
    print("POS Tags:", pos_tags)
    print("Filtered:", filtered)
    print("Stemmed:", stemmed)
    print("Lemmatized:", lemmatized)

# TF-IDF Representation
vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(documents)
df = pd.DataFrame(tfidf_matrix.toarray(), columns=vectorizer.get_feature_names_out())
print("\nTF-IDF Matrix:\n")
print(df)