import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
import numpy as np
import matplotlib.pyplot as plt

# Load data and prepare features/target
df = pd.read_csv("Social_Network_Ads.csv")
X = df[['Age', 'EstimatedSalary']]
y = df['Purchased']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Logistic Regression
model = LogisticRegression().fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluation
acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
tn, fp, fn, tp = cm.ravel()
precision = tp / (tp + fp) if tp + fp else 0
recall = tp / (tp + fn) if tp + fn else 0
error_rate = 1 - acc

print(f"Accuracy: {acc:.2f}, Error Rate: {error_rate:.2f}")
print(f"TP: {tp}, FP: {fp}, TN: {tn}, FN: {fn}")
print(f"Precision: {precision:.2f}, Recall: {recall:.2f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Optional: Sigmoid curve plot
z = np.linspace(-3, 3, 100)
plt.plot(z, 1/(1+np.exp(-z)), label="Sigmoid", color="blue")
plt.axhline(0.5, ls="--", color="red", label="Decision Boundary")
plt.title("Sigmoid Function")
plt.xlabel("z")
plt.ylabel("Probability")
plt.legend()
plt.grid(True)
plt.show()
